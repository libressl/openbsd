.\"	$OpenBSD: EVP_SignInit.3,v 1.3 2016/11/21 22:19:15 jmc Exp $
.\"
.Dd $Mdocdate: November 21 2016 $
.Dt EVP_SIGNINIT 3
.Os
.Sh NAME
.Nm EVP_SignInit_ex ,
.Nm EVP_SignUpdate ,
.Nm EVP_SignFinal ,
.Nm EVP_SignInit ,
.Nm EVP_PKEY_size
.Nd EVP signing functions
.Sh SYNOPSIS
.In openssl/evp.h
.Ft int
.Fo EVP_SignInit_ex
.Fa "EVP_MD_CTX *ctx"
.Fa "const EVP_MD *type"
.Fa "ENGINE *impl"
.Fc
.Ft int
.Fo EVP_SignUpdate
.Fa "EVP_MD_CTX *ctx"
.Fa "const void *d"
.Fa "unsigned int cnt"
.Fc
.Ft int
.Fo EVP_SignFinal
.Fa "EVP_MD_CTX *ctx"
.Fa "unsigned char *sig"
.Fa "unsigned int *s"
.Fa "EVP_PKEY *pkey"
.Fc
.Ft void
.Fo EVP_SignInit
.Fa "EVP_MD_CTX *ctx"
.Fa "const EVP_MD *type"
.Fc
.Ft int
.Fo EVP_PKEY_size
.Fa "EVP_PKEY *pkey"
.Fc
.Sh DESCRIPTION
The EVP signature routines are a high level interface to digital
signatures.
.Pp
.Fn EVP_SignInit_ex
sets up a signing context
.Fa ctx
to use the digest
.Fa type
from
.Vt ENGINE
.Fa impl .
.Fa ctx
must be initialized with
.Xr EVP_MD_CTX_init 3
before calling this function.
.Pp
.Fn EVP_SignUpdate
hashes
.Fa cnt
bytes of data at
.Fa d
into the signature context
.Fa ctx .
This function can be called several times on the same
.Fa ctx
to include additional data.
.Pp
.Fn EVP_SignFinal
signs the data in
.Fa ctx
using the private key
.Fa pkey
and places the signature in
.Fa sig .
.Fa sig
must be at least
.Fn EVP_PKEY_size pkey
bytes in size.
.Fa s
is an OUT parameter, and not used as an IN parameter.
The number of bytes of data written (i.e.\&
the length of the signature) will be written to the integer at
.Fa s .
At most
.Fn EVP_PKEY_size pkey
bytes will be written.
.Pp
.Fn EVP_SignInit
initializes a signing context
.Fa ctx
to use the default implementation of digest
.Fa type .
.Pp
.Fn EVP_PKEY_size
returns the maximum size of a signature in bytes.
The actual signature returned by
.Fn EVP_SignFinal
may be smaller.
.Pp
The EVP interface to digital signatures should almost always be
used in preference to the low level interfaces.
This is because the code then becomes transparent to the algorithm used
and much more flexible.
.Pp
Due to the link between message digests and public key algorithms the
correct digest algorithm must be used with the correct public key type.
A list of algorithms and associated public key algorithms appears in
.Xr EVP_DigestInit 3 .
.Pp
The call to
.Fn EVP_SignFinal
internally finalizes a copy of the digest context.
This means that calls to
.Fn EVP_SignUpdate
and
.Fn EVP_SignFinal
can be called later to digest and sign additional data.
.Pp
Since only a copy of the digest context is ever finalized, the context
must be cleaned up after use by calling
.Xr EVP_MD_CTX_cleanup 3
or a memory leak will occur.
.Sh RETURN VALUES
.Fn EVP_SignInit_ex ,
.Fn EVP_SignUpdate ,
and
.Fn EVP_SignFinal
return 1 for success and 0 for failure.
.Pp
.Fn EVP_PKEY_size
returns the maximum size of a signature in bytes.
.Pp
The error codes can be obtained by
.Xr ERR_get_error 3 .
.Sh SEE ALSO
.Xr ERR 3 ,
.Xr evp 3 ,
.Xr EVP_DigestInit 3 ,
.Xr EVP_VerifyInit 3
.Sh HISTORY
.Fn EVP_SignInit ,
.Fn EVP_SignUpdate ,
and
.Fn EVP_SignFinal
are available in all versions of SSLeay and OpenSSL.
.Pp
.Fn EVP_SignInit_ex
was added in OpenSSL 0.9.7.
.Sh BUGS
Older versions of this documentation wrongly stated that calls to
.Fn EVP_SignUpdate
could not be made after calling
.Fn EVP_SignFinal .
.Pp
Since the private key is passed in the call to
.Fn EVP_SignFinal
any error relating to the private key (for example an unsuitable key and
digest combination) will not be indicated until after potentially large
amounts of data have been passed through
.Fn EVP_SignUpdate .
.Pp
It is not possible to change the signing parameters using these
function.
.Pp
The previous two bugs are fixed in the newer EVP_SignDigest* function.
