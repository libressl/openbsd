.\" $OpenBSD: crypt.3,v 1.44 2014/12/08 20:46:04 tedu Exp $
.\"
.\" FreeSec: libcrypt
.\"
.\" Copyright (c) 1994 David Burren
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 4. Neither the name of the author nor the names of other contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\" Manual page, using -mandoc macros
.\"
.Dd $Mdocdate: December 8 2014 $
.Dt CRYPT 3
.Os
.Sh NAME
.Nm crypt ,
.Nm bcrypt_gensalt ,
.Nm bcrypt
.Nd password hashing
.Sh SYNOPSIS
.In stdlib.h
.Pp
.In unistd.h
.Ft char *
.Fn crypt "const char *key" "const char *setting"
.In pwd.h
.Ft char *
.Fn bcrypt_gensalt "u_int8_t log_rounds"
.Ft char *
.Fn bcrypt "const char *key" "const char *salt"
.Sh DESCRIPTION
These functions are deprecated in favor of
.Xr crypt_checkpass 3
and
.Xr crypt_newhash 3 .
.Pp
The
.Fn crypt
function performs password hashing based on the
NBS Data Encryption Standard (DES).
Additional code has been added to deter key search attempts and to use
stronger hashing algorithms.
.Pp
The first argument to
.Fn crypt
is a NUL-terminated
string
.Fa key ,
typically a user's typed password.
The second,
.Fa setting ,
is in one of three forms:
if it begins with an underscore
.Pq Ql _
then an extended format is used
in interpreting both the
.Fa key
and the
.Fa setting ,
as outlined below.
If it begins
with a string character
.Pq Ql $
and a number then a different algorithm is used depending on the number.
At the moment
.Ql $2
chooses Blowfish hashing; see below for more information.
.Ss Extended crypt
The
.Fa key
is divided into groups of 8 characters (the last group is null-padded)
and the low-order 7 bits of each character (56 bits per group) are
used to form the DES key as follows:
the first group of 56 bits becomes the initial DES key.
For each additional group, the XOR of the encryption of the current DES
key with itself and the group bits becomes the next DES key.
.Pp
The
.Fa setting
is a 9-character array consisting of an underscore followed
by 4 bytes of iteration count and 4 bytes of salt.
These are encoded as printable characters, 6 bits per character,
least significant character first.
The values 0 to 63 are encoded as
.Dq \&./0-9A-Za-z .
This allows 24 bits for both
.Fa count
and
.Fa salt .
.Ss Blowfish crypt
The Blowfish version of crypt has 128 bits of
.Fa salt
in order to make building dictionaries of common passwords space consuming.
The initial state of the
Blowfish cipher is expanded using the
.Fa salt
and the
.Fa password
repeating the process a variable number of rounds, which is encoded in
the password string.
The maximum password length is 72.
The final Blowfish password entry is created by encrypting the string
.Pp
.Dq OrpheanBeholderScryDoubt
.Pp
with the Blowfish state 64 times.
.Pp
The version number, the logarithm of the number of rounds and
the concatenation of salt and hashed password are separated by the
.Ql $
character.
An encoded
.Sq 8
would specify 256 rounds.
A valid Blowfish password looks like this:
.Pp
.Dq $2b$12$FPWWO2RJ3CK4FINTw0Hi8OiPKJcX653gzSS.jqltHFMxyDmmQ0Hqq .
.Pp
The whole Blowfish password string is passed as
.Fa setting
for interpretation.
.Ss Traditional crypt
The first 8 bytes of the
.Fa key
are null-padded, and the low-order 7 bits of
each character is used to form the 56-bit DES key.
.Pp
The
.Fa setting
is a 2-character array of the ASCII-encoded salt.
Thus only 12 bits of
.Fa salt
are used.
.Fa count
is set to 25.
.Ss DES Algorithm
The
.Fa salt
introduces disorder in the DES
algorithm in one of 16777216 or 4096 possible ways
(i.e., with 24 or 12 bits: if bit
.Em i
of the
.Fa salt
is set, then bits
.Em i
and
.Em i+24
are swapped in the DES E-box output).
.Pp
The DES key is used to encrypt a 64-bit constant using
.Fa count
iterations of DES.
The value returned is a NUL-terminated
string, 20 or 13 bytes (plus NUL) in length, consisting of the
.Fa setting
followed by the encoded 64-bit encryption.
.Sh RETURN VALUES
The function
.Fn crypt
returns a pointer to the encrypted value on success, and
.Dv NULL
on failure.
.Sh SEE ALSO
.Xr encrypt 1 ,
.Xr login 1 ,
.Xr passwd 1 ,
.Xr blowfish 3 ,
.Xr crypt_checkpass 3 ,
.Xr getpass 3 ,
.Xr passwd 5
.Sh HISTORY
A rotor-based
.Fn crypt
function appeared in
.At v3 .
The current style
.Fn crypt
first appeared in
.At v7 .
.Sh AUTHORS
.An David Burren Aq Mt davidb@werj.com.au
wrote the original DES functions.
.Sh BUGS
The
.Fn crypt
function returns a pointer to static data, and subsequent calls to
.Fn crypt
will modify the same object.
.Pp
With DES hashing, passwords containing the byte 0x80 use less key entropy
than other passwords.
This is an implementation bug, not a bug in the DES cipher.
